import{o as n,c as s,a}from"./app.a384575a.js";const e='{"title":"简介","description":"","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"初衷","slug":"初衷"},{"level":2,"title":"实现","slug":"实现"},{"level":2,"title":"github地址","slug":"github地址"}],"relativePath":"index.md","lastUpdated":1627536883030}',r={},p=a('<h1 id="简介"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h1><p><a href="https://github.com/awesomeWDB/vitepress-plugin-demo" target="_blank" rel="noopener noreferrer">vitepress-plugin-demo</a>是一个vitepress的扩展，实现：源码展示+效果预览，提供一个方便的文档编辑体验，特别是前端UI组件库的文档的编写。</p><h2 id="初衷"><a class="header-anchor" href="#初衷" aria-hidden="true">#</a> 初衷</h2><p>vitepress本身已经提供了很好的文档编写体验，但本人还是有编写demo（特别是组件演示）的需求，所以想提供一个锦上添花的功能。</p><p>在看vue相关UI框架源码的时候，发现element-ui、navie的文档，都是借助markdown渲染引擎（markdow-it、marked），再按需加上内部扩展，实现自己的md-loader。然后打包工具配合md-loader，实现md文件到vue路由组件的渲染。</p><p>因此，想要实现一个类似于md-loader的封装，用户只需要实现自己的DemoBlock组件（根据props、slots）就行了，vitepress-plugin-demo就是这样的一款扩展。这样，用户只需要关注：md文档的编写、示例代码的编写。</p><h2 id="实现"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><ol><li>vitepress已经内部集成了markdown-it，并且在config.js中提供了md对象。<a href="https://markdown-it.docschina.org/" target="_blank" rel="noopener noreferrer">markdown-it官网</a>，<a href="https://vitepress.vuejs.org/guide/markdown.html#advanced-configuration" target="_blank" rel="noopener noreferrer">vitepress高级配置</a></li><li>最先参考的是element-ui的实现，把所有的demo都生成组件字符串（官网源码注明了&quot;硬编码&quot;），然后拼接到文档页面的components下面，这样的话里面一些script没有执行。<a href="https://github.com/ElemeFE/element/blob/dev/build/md-loader/index.js" target="_blank" rel="noopener noreferrer">v2版</a>，<a href="https://github.com/element-plus/element-plus/blob/dev/website/md-loader/index.js" target="_blank" rel="noopener noreferrer">v3版</a>。</li><li>然后尤大推荐了naive-ui，趁此机会学习了一下它的文档展示逻辑，把md文档分为两层：第一层为文档页面、第二层为文档demo；这样加载第一层的时候，解析到demo再去加载的时候，就会把demo当做一个组件解析，这样demo内script的相关引入都可以正常执行。<a href="https://github.com/TuSimple/naive-ui/blob/main/build/loaders/convert-md-to-doc.js" target="_blank" rel="noopener noreferrer">naive实现</a></li><li>最后采用naive的方案，把文档分为两层，但是做一点小改动，可以直接引入vue组件，方便从其他地方复制过来（直接使用）。</li></ol><p>另外，虽然官网目前只提供了：lang、base、title、description、markdown的配置项，但从vitepress源码中还是可以看到可以配置很多选项的，有很多文章可做。</p><div class="language-javascript line-numbers-mode"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UserConfig</span><span class="token operator">&lt;</span>ThemeConfig <span class="token operator">=</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  lang<span class="token operator">?</span><span class="token operator">:</span> string\n  base<span class="token operator">?</span><span class="token operator">:</span> string\n  title<span class="token operator">?</span><span class="token operator">:</span> string\n  description<span class="token operator">?</span><span class="token operator">:</span> string\n  head<span class="token operator">?</span><span class="token operator">:</span> HeadConfig<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  themeConfig<span class="token operator">?</span><span class="token operator">:</span> ThemeConfig\n  locales<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> LocaleConfig<span class="token operator">&gt;</span>\n  markdown<span class="token operator">?</span><span class="token operator">:</span> MarkdownOptions\n  <span class="token comment">/**\n   * Opitons to pass on to @vitejs/plugin-vue\n   */</span>\n  vue<span class="token operator">?</span><span class="token operator">:</span> VuePluginOptions\n  <span class="token comment">/**\n   * Vite config\n   */</span>\n  vite<span class="token operator">?</span><span class="token operator">:</span> ViteConfig\n  customData<span class="token operator">?</span><span class="token operator">:</span> any\n\n  srcDir<span class="token operator">?</span><span class="token operator">:</span> string\n  srcExclude<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token comment">/**\n   * @deprecated use `srcExclude` instead\n   */</span>\n  exclude<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token comment">/**\n   * @deprecated use `vue` instead\n   */</span>\n  vueOptions<span class="token operator">?</span><span class="token operator">:</span> VuePluginOptions\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ol start="5"><li>所以后续目标是优化element-ui的方案，能够直接在文档页面上编辑demo，然后把demo作为一个异步模块（<a href="https://cn.vitejs.dev/guide/api-plugin.html#importing-a-virtual-file" target="_blank" rel="noopener noreferrer">虚拟文件</a>）引入进来，这样就不用手动新建一个vue组件了（不利于docs文档的目录组织，个人看法）。</li></ol><h2 id="github地址"><a class="header-anchor" href="#github地址" aria-hidden="true">#</a> github地址</h2>',12);r.render=function(a,e,r,o,t,l){return n(),s("div",null,[p])};export default r;export{e as __pageData};
